name: Deployment Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Check for package.json
        id: check_package
        run: |
          if [ -f "package.json" ]; then
            echo "has_package=true" >> $GITHUB_OUTPUT
          else
            echo "has_package=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Install dependencies
        if: steps.check_package.outputs.has_package == 'true'
        run: npm ci
        continue-on-error: true
      
      - name: Run tests
        if: steps.check_package.outputs.has_package == 'true'
        run: npm test || echo "Tests not configured"
        continue-on-error: true
      
      - name: Build application
        if: steps.check_package.outputs.has_package == 'true'
        run: npm run build || echo "Build script not configured"
        continue-on-error: true
      
      - name: Create build artifacts placeholder
        run: |
          if [ ! -d "dist" ] && [ ! -d "build" ]; then
            mkdir -p dist
            echo "# Build artifacts" > dist/README.md
            echo "Build artifacts will be placed here" >> dist/README.md
          fi
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            build/
          if-no-files-found: warn
          retention-days: 1
  
  deploy:
    name: Deploy to Platform
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./artifacts
          if-no-files-found: warn
      
      - name: Deploy to Heroku
        if: env.HEROKU_API_KEY != ''
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
        run: |
          echo "Deploying to Heroku..."
          # Heroku deployment commands would go here
          # heroku deploy:jar target/myapp.jar --app $HEROKU_APP_NAME
          echo "Heroku deployment configured (requires HEROKU_API_KEY secret)"
      
      - name: Deploy to AWS
        if: env.AWS_ACCESS_KEY_ID != ''
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "Deploying to AWS..."
          # AWS deployment commands would go here
          # aws s3 sync dist/ s3://$S3_BUCKET_NAME
          echo "AWS deployment configured (requires AWS secrets)"
      
      - name: Deployment summary
        run: |
          echo "## Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Platform deployments configured (secrets required for actual deployment)" >> $GITHUB_STEP_SUMMARY
  
  deploy-pages:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./deploy-dist
          if-no-files-found: warn
      
      - name: Prepare deployment directory
        run: |
          if [ -d "./deploy-dist/dist" ]; then
            mkdir -p ./site
            cp -r ./deploy-dist/dist/* ./site/ || true
          elif [ -d "./deploy-dist/build" ]; then
            mkdir -p ./site
            cp -r ./deploy-dist/build/* ./site/ || true
          elif [ -d "./deploy-dist" ]; then
            mkdir -p ./site
            cp -r ./deploy-dist/* ./site/ || true
          else
            # Create a placeholder page
            mkdir -p ./site
            cat > ./site/index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Deployment - SCD Assignment 2</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        h1 { color: #333; }
    </style>
</head>
<body>
    <h1>Deployment Pipeline</h1>
    <p>This is a placeholder deployment page.</p>
    <p>Build artifacts will be deployed here when available.</p>
</body>
</html>
EOF
          fi
      
      - name: Setup Pages
        uses: actions/configure-pages@v3
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: './site'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
      
      - name: Deployment summary
        run: |
          echo "## GitHub Pages Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- Status: Success" >> $GITHUB_STEP_SUMMARY
          echo "- URL: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- Deployed at: $(date)" >> $GITHUB_STEP_SUMMARY

